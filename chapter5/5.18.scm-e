(define (make-register name)
  (let ((contents '*unassigned*)
        (tracing false))
    (define (dispatch message)
      (define (set-contents! value)
        (let ((old-value contents))
            (set! contents value)
            (if tracing
                (begin (display "(Register:")
                       (display name)
                       (display " prev-value:")
                       (display old-value)
                       (display " cur-value:")
                       (display contents)
                       (display ")\n")))))
      (cond ((eq? message 'get) contents)
            ((eq? message 'set) set-contents!)
            ((eq? message 'tracing-on)
             (lambda () (set! tracing true)))
            ((eq? message 'tracing-off)
             (lambda () (set! tracing false)))
            (else
             (error "Unknown request -- REGISTER" message))))
    dispatch))

(define (reg-tracing-on register)
    ((register 'tracing-on)))

(define (reg-tracing-off register)
    ((register 'tracing-off)))

(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (labels '())
        (inst-count 0)
        (tracing false))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))
                 (list 'print-stack-statistics
                       (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (preceeding-label inst-text)
        (define (pl inst-text lbls)
            (if (null? lbls)
                false
                (let ((label-entry (car lbls)))
                    (let ((label (car label-entry))
                          (insts (cdr label-entry)))
                        (if (null? insts)
                            (pl inst-text (cdr lbls))
                            (if (eq? (instruction-text (car insts)) inst-text)
                                label
                                (pl inst-text (cdr lbls))))))))
        (pl inst-text labels))
      (define (display-instruction inst-text)
        (let ((label (preceeding-label inst-text)))
            (if label
                (begin (display label) (display "\n")))
            (display inst-text)
            (display "\n")))
      (define (set-register-tracing! reg-name flag)
        (let ((reg (lookup-register reg-name)))
            (if flag
                (reg-tracing-on reg)
                (reg-tracing-off reg)))
        'register-tracing-on)
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                (if tracing
                    (display-instruction (instruction-text (car insts))))
                ((instruction-execution-proc (car insts)))
                (set! inst-count (+ inst-count 1))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'install-labels)
               (lambda (seq) (set! labels seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'inst-count-print-reset) 
               (lambda () (display inst-count) (set! inst-count 0)))
              ((eq? message 'set-tracing-status!) 
               (lambda (status) (if status (set! tracing true) (set! tracing false))))
              ((eq? message 'register-tracing-on)
                (lambda (reg-name) (set-register-tracing! reg-name true)))
              ((eq? message 'register-tracing-off)
                (lambda (reg-name) (set-register-tracing! regname false)))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (machine-reg-tracing-on machine reg-name)
    ((machine 'register-tracing-on) reg-name))

(define (machine-reg-tracing-off machine reg-name)
    ((machine 'register-tracing-off) reg-name))

;Test
(define exp-machine
  (make-machine
   '(n b val continue)
   (list (list '- -) (list '= =) (list '* *))
   '((assign continue (label exp-end))
     exp-start
     (test (op =) (reg n) (const 0))
     (branch (label base-case))
     (save continue)
     (save n)
     (save b)
     (assign n (op -) (reg n) (const 1))
     (assign continue (label exp-mul))
     (goto (label exp-start))
     exp-mul
     (restore b)
     (restore n)
     (restore continue)
     (assign val (op *) (reg b) (reg val))
     (goto (reg continue))
     base-case
     (assign val (const 1))
     (goto (reg continue))
     exp-end)))
