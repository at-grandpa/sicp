(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (labels '())
        (inst-count 0)
        (tracing false)
        (breakpoints '()))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))
                 (list 'print-stack-statistics
                       (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (preceeding-label inst-text)
        (define (pl inst-text lbls)
            (if (null? lbls)
                false
                (let ((label-entry (car lbls)))
                    (let ((label (car label-entry))
                          (insts (cdr label-entry)))
                        (if (null? insts)
                            (pl inst-text (cdr lbls))
                            (if (eq? (instruction-text (car insts)) inst-text)
                                label
                                (pl inst-text (cdr lbls))))))))
        (pl inst-text labels))
      (define (display-instruction inst-text)
        (let ((label (preceeding-label inst-text)))
            (if label
                (begin (display label) (display "\n")))
            (display inst-text)
            (display "\n")))
      (define (set-register-tracing! reg-name flag)
        (let ((reg (lookup-register reg-name)))
            (if flag
                (reg-tracing-on reg)
                (reg-tracing-off reg)))
        'register-tracing-on)
      ;utility procedures----------------
      (define (lookup-label label)
        (let ((label-entry (assoc label labels)))
            (if label-entry
                (cdr label-entry)
                (error "Unknown Label:" label))))
      (define (get-nth-instruction inst-seq n)
        (cond ((null? inst-seq) false)
              ((= n 1) (car inst-seq))
              (else (get-nth-instruction (cdr inst-seq) (- n 1)))))
      (define (execute-instruction inst)
        ((instruction-execution-proc inst))
        (set! inst-count (+ inst-count 1))
        (execute false))
      ;breakpoint procedures--------------
      (define (set-breakpoint label n-jump)
        (let ((inst-seq (lookup-label label)))
            (if (< n-jump 1)
                (error "Can't see that location from here"))
            (let ((inst (get-nth-instruction inst-seq n-jump)))
                (if inst
                    (set! breakpoints (cons (make-breakpoint label n-jump inst) breakpoints))
                    (error "No instruction at the specified point")))
            'breakpoint-set))
      (define (lookup-breakpoint cur-inst)
        (define (lookup breakpoints)
            (if (null? breakpoints)
                false
                (let ((b (car breakpoints)))
                    (if (eq? (instruction-text cur-inst)
                             (instruction-text (breakpoint-inst b)))
                        b
                        (lookup (cdr breakpoints))))))
        (lookup breakpoints))
      (define (cancel-breakpoint label n)
        (define (rm-breakpoint breakpoints)
            (cond ((null? breakpoints) '())
                  ((and (eq? label (breakpoint-label (car breakpoints)))
                        (eq? n (breakpoint-n (car breakpoints))))
                    (cdr breakpoints))
                  (else (cons (car breakpoints) (new-breakpoints (cdr breakpoints))))))
        (set! breakpoints (rm-breakpoint breakpoints))
        'breakpoint-removed)
      ;-----------------------------------
      (define (execute ignore-breakpoint)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (let ((cur-inst (car insts)))
                (if tracing
                    (display-instruction (instruction-text cur-inst)))
                    (if ignore-breakpoint
                        (execute-instruction cur-inst)
                        (let ((b (lookup-breakpoint cur-inst)))
                            (if b
                                (display-breakpoint b)
                                (execute-instruction cur-inst))))))))
      ;For testing purposes
      (define (display-pc-instructions)
        (for-each (lambda (inst)
                    (display (instruction-text inst))
                    (display newline))
                  (get-contents pc)))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute false))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'install-labels)
               (lambda (seq) (set! labels seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'inst-count-print-reset) 
               (lambda () (display inst-count) (set! inst-count 0)))
              ((eq? message 'set-tracing-status!) 
               (lambda (status) (if status (set! tracing true) (set! tracing false))))
              ((eq? message 'register-tracing-on)
                (lambda (reg-name) (set-register-tracing! reg-name true)))
              ((eq? message 'register-tracing-off)
                (lambda (reg-name) (set-register-tracing! regname false)))
              ;---------------------breakpoint-additions------------
              ((eq? message 'set-breakpoint) set-breakpoint)
              ((eq? message 'proceed-machine) 
                (lambda () (execute true)))
              ((eq? message 'cancel-breakpoint) cancel-breakpoint)
              ((eq? message 'cancel-all-breakpoints)
                (lambda () (set! breakpoints '())))
              ((eq? message 'display-pc-instructions) display-pc-instructions)  ;For testing purposes
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define (make-breakpoint label n inst)  (list label n inst))
(define (breakpoint-label b) (car b))
(define (breakpoint-n b) (cadr b))
(define (breakpoint-inst b) (caddr b))
(define (display-breakpoint b)
    (display "(Breakpoint @ [")
    (display (breakpoint-label b))
    (display " + ")
    (display (breakpoint-n b))
    (display "] ")
    (display (instruction-text (breakpoint-inst b)))
    (display ")\n"))

(define (set-breakpoint machine label n)
    ((machine 'set-breakpoint) label n))

(define (proceed-machine machine)
    ((machine 'proceed-machine)))

(define (display-pc-instructions machine)   ;For testing purposes
    ((machine 'display-pc-instructions)))

(define (cancel-breakpoint machine label n)
    ((machine 'cancel-breakpoint) label n))

(define (cancel-all-breakpoints machine)
    ((machine 'cancel-all-breakpoints)))
